"""
Usage:
Training:
python train.py --config-name=train_diffusion_lowdim_workspace
"""

import sys
# use line-buffering for both stdout and stderr
sys.stdout = open(sys.stdout.fileno(), mode='w', buffering=1)
sys.stderr = open(sys.stderr.fileno(), mode='w', buffering=1)

import hydra
import torch
import dill
from omegaconf import OmegaConf
import pathlib
from diffusion_policy.workspace.base_workspace import BaseWorkspace

# allows arbitrary python code execution in configs using the ${eval:''} resolver
OmegaConf.register_new_resolver("eval", eval, replace=True)

@hydra.main(
    version_base=None,
    config_path=str(pathlib.Path(__file__).parent.joinpath(
        'diffusion_policy','config'))
)
def main(cfg: OmegaConf):
    # resolve immediately so all the ${now:} resolvers
    # will use the same time.
    OmegaConf.resolve(cfg)

    exclude_keys = ["controlnet_model.time_mlp.1.weight", "controlnet_model.time_mlp.1.bias", "controlnet_model.time_mlp.3.weight", "controlnet_model.time_mlp.3.bias", "controlnet_model.downs.0.0.blocks.0.block.0.weight", "controlnet_model.downs.0.0.blocks.0.block.0.bias", "controlnet_model.downs.0.0.blocks.0.block.1.weight", "controlnet_model.downs.0.0.blocks.0.block.1.bias", "controlnet_model.downs.0.0.blocks.1.block.0.weight", "controlnet_model.downs.0.0.blocks.1.block.0.bias", "controlnet_model.downs.0.0.blocks.1.block.1.weight", "controlnet_model.downs.0.0.blocks.1.block.1.bias", "controlnet_model.downs.0.0.cond_encoder.1.weight", "controlnet_model.downs.0.0.cond_encoder.1.bias", "controlnet_model.downs.0.0.residual_conv.weight", "controlnet_model.downs.0.0.residual_conv.bias", "controlnet_model.downs.0.1.blocks.0.block.0.weight", "controlnet_model.downs.0.1.blocks.0.block.0.bias", "controlnet_model.downs.0.1.blocks.0.block.1.weight", "controlnet_model.downs.0.1.blocks.0.block.1.bias", "controlnet_model.downs.0.1.blocks.1.block.0.weight", "controlnet_model.downs.0.1.blocks.1.block.0.bias", "controlnet_model.downs.0.1.blocks.1.block.1.weight", "controlnet_model.downs.0.1.blocks.1.block.1.bias", "controlnet_model.downs.0.1.cond_encoder.1.weight", "controlnet_model.downs.0.1.cond_encoder.1.bias", "controlnet_model.downs.0.2.conv.weight", "controlnet_model.downs.0.2.conv.bias", "controlnet_model.downs.1.0.blocks.0.block.0.weight", "controlnet_model.downs.1.0.blocks.0.block.0.bias", "controlnet_model.downs.1.0.blocks.0.block.1.weight", "controlnet_model.downs.1.0.blocks.0.block.1.bias", "controlnet_model.downs.1.0.blocks.1.block.0.weight", "controlnet_model.downs.1.0.blocks.1.block.0.bias", "controlnet_model.downs.1.0.blocks.1.block.1.weight", "controlnet_model.downs.1.0.blocks.1.block.1.bias", "controlnet_model.downs.1.0.cond_encoder.1.weight", "controlnet_model.downs.1.0.cond_encoder.1.bias", "controlnet_model.downs.1.0.residual_conv.weight", "controlnet_model.downs.1.0.residual_conv.bias", "controlnet_model.downs.1.1.blocks.0.block.0.weight", "controlnet_model.downs.1.1.blocks.0.block.0.bias", "controlnet_model.downs.1.1.blocks.0.block.1.weight", "controlnet_model.downs.1.1.blocks.0.block.1.bias", "controlnet_model.downs.1.1.blocks.1.block.0.weight", "controlnet_model.downs.1.1.blocks.1.block.0.bias", "controlnet_model.downs.1.1.blocks.1.block.1.weight", "controlnet_model.downs.1.1.blocks.1.block.1.bias", "controlnet_model.downs.1.1.cond_encoder.1.weight", "controlnet_model.downs.1.1.cond_encoder.1.bias", "controlnet_model.downs.1.2.conv.weight", "controlnet_model.downs.1.2.conv.bias", "controlnet_model.downs.2.0.blocks.0.block.0.weight", "controlnet_model.downs.2.0.blocks.0.block.0.bias", "controlnet_model.downs.2.0.blocks.0.block.1.weight", "controlnet_model.downs.2.0.blocks.0.block.1.bias", "controlnet_model.downs.2.0.blocks.1.block.0.weight", "controlnet_model.downs.2.0.blocks.1.block.0.bias", "controlnet_model.downs.2.0.blocks.1.block.1.weight", "controlnet_model.downs.2.0.blocks.1.block.1.bias", "controlnet_model.downs.2.0.cond_encoder.1.weight", "controlnet_model.downs.2.0.cond_encoder.1.bias", "controlnet_model.downs.2.0.residual_conv.weight", "controlnet_model.downs.2.0.residual_conv.bias", "controlnet_model.downs.2.1.blocks.0.block.0.weight", "controlnet_model.downs.2.1.blocks.0.block.0.bias", "controlnet_model.downs.2.1.blocks.0.block.1.weight", "controlnet_model.downs.2.1.blocks.0.block.1.bias", "controlnet_model.downs.2.1.blocks.1.block.0.weight", "controlnet_model.downs.2.1.blocks.1.block.0.bias", "controlnet_model.downs.2.1.blocks.1.block.1.weight", "controlnet_model.downs.2.1.blocks.1.block.1.bias", "controlnet_model.downs.2.1.cond_encoder.1.weight", "controlnet_model.downs.2.1.cond_encoder.1.bias", "controlnet_model.ups.0.0.blocks.0.block.0.weight", "controlnet_model.ups.0.0.blocks.0.block.0.bias", "controlnet_model.ups.0.0.blocks.0.block.1.weight", "controlnet_model.ups.0.0.blocks.0.block.1.bias", "controlnet_model.ups.0.0.blocks.1.block.0.weight", "controlnet_model.ups.0.0.blocks.1.block.0.bias", "controlnet_model.ups.0.0.blocks.1.block.1.weight", "controlnet_model.ups.0.0.blocks.1.block.1.bias", "controlnet_model.ups.0.0.cond_encoder.1.weight", "controlnet_model.ups.0.0.cond_encoder.1.bias", "controlnet_model.ups.0.0.residual_conv.weight", "controlnet_model.ups.0.0.residual_conv.bias", "controlnet_model.ups.0.1.blocks.0.block.0.weight", "controlnet_model.ups.0.1.blocks.0.block.0.bias", "controlnet_model.ups.0.1.blocks.0.block.1.weight", "controlnet_model.ups.0.1.blocks.0.block.1.bias", "controlnet_model.ups.0.1.blocks.1.block.0.weight", "controlnet_model.ups.0.1.blocks.1.block.0.bias", "controlnet_model.ups.0.1.blocks.1.block.1.weight", "controlnet_model.ups.0.1.blocks.1.block.1.bias", "controlnet_model.ups.0.1.cond_encoder.1.weight", "controlnet_model.ups.0.1.cond_encoder.1.bias", "controlnet_model.ups.0.2.conv.weight", "controlnet_model.ups.0.2.conv.bias", "controlnet_model.ups.1.0.blocks.0.block.0.weight", "controlnet_model.ups.1.0.blocks.0.block.0.bias", "controlnet_model.ups.1.0.blocks.0.block.1.weight", "controlnet_model.ups.1.0.blocks.0.block.1.bias", "controlnet_model.ups.1.0.blocks.1.block.0.weight", "controlnet_model.ups.1.0.blocks.1.block.0.bias", "controlnet_model.ups.1.0.blocks.1.block.1.weight", "controlnet_model.ups.1.0.blocks.1.block.1.bias", "controlnet_model.ups.1.0.cond_encoder.1.weight", "controlnet_model.ups.1.0.cond_encoder.1.bias", "controlnet_model.ups.1.0.residual_conv.weight", "controlnet_model.ups.1.0.residual_conv.bias", "controlnet_model.ups.1.1.blocks.0.block.0.weight", "controlnet_model.ups.1.1.blocks.0.block.0.bias", "controlnet_model.ups.1.1.blocks.0.block.1.weight", "controlnet_model.ups.1.1.blocks.0.block.1.bias", "controlnet_model.ups.1.1.blocks.1.block.0.weight", "controlnet_model.ups.1.1.blocks.1.block.0.bias", "controlnet_model.ups.1.1.blocks.1.block.1.weight", "controlnet_model.ups.1.1.blocks.1.block.1.bias", "controlnet_model.ups.1.1.cond_encoder.1.weight", "controlnet_model.ups.1.1.cond_encoder.1.bias", "controlnet_model.ups.1.2.conv.weight", "controlnet_model.ups.1.2.conv.bias", "controlnet_model.mid_modules.0.blocks.0.block.0.weight", "controlnet_model.mid_modules.0.blocks.0.block.0.bias", "controlnet_model.mid_modules.0.blocks.0.block.1.weight", "controlnet_model.mid_modules.0.blocks.0.block.1.bias", "controlnet_model.mid_modules.0.blocks.1.block.0.weight", "controlnet_model.mid_modules.0.blocks.1.block.0.bias", "controlnet_model.mid_modules.0.blocks.1.block.1.weight", "controlnet_model.mid_modules.0.blocks.1.block.1.bias", "controlnet_model.mid_modules.0.cond_encoder.1.weight", "controlnet_model.mid_modules.0.cond_encoder.1.bias", "controlnet_model.mid_modules.1.blocks.0.block.0.weight", "controlnet_model.mid_modules.1.blocks.0.block.0.bias", "controlnet_model.mid_modules.1.blocks.0.block.1.weight", "controlnet_model.mid_modules.1.blocks.0.block.1.bias", "controlnet_model.mid_modules.1.blocks.1.block.0.weight", "controlnet_model.mid_modules.1.blocks.1.block.0.bias", "controlnet_model.mid_modules.1.blocks.1.block.1.weight", "controlnet_model.mid_modules.1.blocks.1.block.1.bias", "controlnet_model.mid_modules.1.cond_encoder.1.weight", "controlnet_model.mid_modules.1.cond_encoder.1.bias", "controlnet_model.final_conv.0.block.0.weight", "controlnet_model.final_conv.0.block.0.bias", "controlnet_model.final_conv.0.block.1.weight", "controlnet_model.final_conv.0.block.1.bias", "controlnet_model.final_conv.1.weight", "controlnet_model.final_conv.1.bias", "controlnet_model.copy_downs.0.0.blocks.0.block.0.weight", "controlnet_model.copy_downs.0.0.blocks.0.block.0.bias", "controlnet_model.copy_downs.0.0.blocks.0.block.1.weight", "controlnet_model.copy_downs.0.0.blocks.0.block.1.bias", "controlnet_model.copy_downs.0.0.blocks.1.block.0.weight", "controlnet_model.copy_downs.0.0.blocks.1.block.0.bias", "controlnet_model.copy_downs.0.0.blocks.1.block.1.weight", "controlnet_model.copy_downs.0.0.blocks.1.block.1.bias", "controlnet_model.copy_downs.0.0.cond_encoder.1.weight", "controlnet_model.copy_downs.0.0.cond_encoder.1.bias", "controlnet_model.copy_downs.0.0.residual_conv.weight", "controlnet_model.copy_downs.0.0.residual_conv.bias", "controlnet_model.copy_downs.0.1.blocks.0.block.0.weight", "controlnet_model.copy_downs.0.1.blocks.0.block.0.bias", "controlnet_model.copy_downs.0.1.blocks.0.block.1.weight", "controlnet_model.copy_downs.0.1.blocks.0.block.1.bias", "controlnet_model.copy_downs.0.1.blocks.1.block.0.weight", "controlnet_model.copy_downs.0.1.blocks.1.block.0.bias", "controlnet_model.copy_downs.0.1.blocks.1.block.1.weight", "controlnet_model.copy_downs.0.1.blocks.1.block.1.bias", "controlnet_model.copy_downs.0.1.cond_encoder.1.weight", "controlnet_model.copy_downs.0.1.cond_encoder.1.bias", "controlnet_model.copy_downs.0.2.conv.weight", "controlnet_model.copy_downs.0.2.conv.bias", "controlnet_model.copy_downs.1.0.blocks.0.block.0.weight", "controlnet_model.copy_downs.1.0.blocks.0.block.0.bias", "controlnet_model.copy_downs.1.0.blocks.0.block.1.weight", "controlnet_model.copy_downs.1.0.blocks.0.block.1.bias", "controlnet_model.copy_downs.1.0.blocks.1.block.0.weight", "controlnet_model.copy_downs.1.0.blocks.1.block.0.bias", "controlnet_model.copy_downs.1.0.blocks.1.block.1.weight", "controlnet_model.copy_downs.1.0.blocks.1.block.1.bias", "controlnet_model.copy_downs.1.0.cond_encoder.1.weight", "controlnet_model.copy_downs.1.0.cond_encoder.1.bias", "controlnet_model.copy_downs.1.0.residual_conv.weight", "controlnet_model.copy_downs.1.0.residual_conv.bias", "controlnet_model.copy_downs.1.1.blocks.0.block.0.weight", "controlnet_model.copy_downs.1.1.blocks.0.block.0.bias", "controlnet_model.copy_downs.1.1.blocks.0.block.1.weight", "controlnet_model.copy_downs.1.1.blocks.0.block.1.bias", "controlnet_model.copy_downs.1.1.blocks.1.block.0.weight", "controlnet_model.copy_downs.1.1.blocks.1.block.0.bias", "controlnet_model.copy_downs.1.1.blocks.1.block.1.weight", "controlnet_model.copy_downs.1.1.blocks.1.block.1.bias", "controlnet_model.copy_downs.1.1.cond_encoder.1.weight", "controlnet_model.copy_downs.1.1.cond_encoder.1.bias", "controlnet_model.copy_downs.1.2.conv.weight", "controlnet_model.copy_downs.1.2.conv.bias", "controlnet_model.copy_downs.2.0.blocks.0.block.0.weight", "controlnet_model.copy_downs.2.0.blocks.0.block.0.bias", "controlnet_model.copy_downs.2.0.blocks.0.block.1.weight", "controlnet_model.copy_downs.2.0.blocks.0.block.1.bias", "controlnet_model.copy_downs.2.0.blocks.1.block.0.weight", "controlnet_model.copy_downs.2.0.blocks.1.block.0.bias", "controlnet_model.copy_downs.2.0.blocks.1.block.1.weight", "controlnet_model.copy_downs.2.0.blocks.1.block.1.bias", "controlnet_model.copy_downs.2.0.cond_encoder.1.weight", "controlnet_model.copy_downs.2.0.cond_encoder.1.bias", "controlnet_model.copy_downs.2.0.residual_conv.weight", "controlnet_model.copy_downs.2.0.residual_conv.bias", "controlnet_model.copy_downs.2.1.blocks.0.block.0.weight", "controlnet_model.copy_downs.2.1.blocks.0.block.0.bias", "controlnet_model.copy_downs.2.1.blocks.0.block.1.weight", "controlnet_model.copy_downs.2.1.blocks.0.block.1.bias", "controlnet_model.copy_downs.2.1.blocks.1.block.0.weight", "controlnet_model.copy_downs.2.1.blocks.1.block.0.bias", "controlnet_model.copy_downs.2.1.blocks.1.block.1.weight", "controlnet_model.copy_downs.2.1.blocks.1.block.1.bias", "controlnet_model.copy_downs.2.1.cond_encoder.1.weight", "controlnet_model.copy_downs.2.1.cond_encoder.1.bias", "controlnet_model.copy_mid_block.0.blocks.0.block.0.weight", "controlnet_model.copy_mid_block.0.blocks.0.block.0.bias", "controlnet_model.copy_mid_block.0.blocks.0.block.1.weight", "controlnet_model.copy_mid_block.0.blocks.0.block.1.bias", "controlnet_model.copy_mid_block.0.blocks.1.block.0.weight", "controlnet_model.copy_mid_block.0.blocks.1.block.0.bias", "controlnet_model.copy_mid_block.0.blocks.1.block.1.weight", "controlnet_model.copy_mid_block.0.blocks.1.block.1.bias", "controlnet_model.copy_mid_block.0.cond_encoder.1.weight", "controlnet_model.copy_mid_block.0.cond_encoder.1.bias", "controlnet_model.copy_mid_block.1.blocks.0.block.0.weight", "controlnet_model.copy_mid_block.1.blocks.0.block.0.bias", "controlnet_model.copy_mid_block.1.blocks.0.block.1.weight", "controlnet_model.copy_mid_block.1.blocks.0.block.1.bias", "controlnet_model.copy_mid_block.1.blocks.1.block.0.weight", "controlnet_model.copy_mid_block.1.blocks.1.block.0.bias", "controlnet_model.copy_mid_block.1.blocks.1.block.1.weight", "controlnet_model.copy_mid_block.1.blocks.1.block.1.bias", "controlnet_model.copy_mid_block.1.cond_encoder.1.weight", "controlnet_model.copy_mid_block.1.cond_encoder.1.bias", "controlnet_model.mid_controlnet_block.weight", "controlnet_model.mid_controlnet_block.bias", "controlnet_model.controlnet_blocks.0.weight", "controlnet_model.controlnet_blocks.0.bias", "controlnet_model.controlnet_blocks.1.weight", "controlnet_model.controlnet_blocks.1.bias", "controlnet_model.controlnet_blocks.2.weight", "controlnet_model.controlnet_blocks.2.bias"]

    print(cfg)

    cls = hydra.utils.get_class(cfg._target_)
    workspace: BaseWorkspace = cls(cfg)

    # load checkpoint
    payload = torch.load(open(cfg.checkpoint.load_target_ckpt, 'rb'), pickle_module=dill)
    # cfg = payload['cfg']
    # cls = hydra.utils.get_class(cfg._target_)
    # print(cfg._target_)
    # workspace = cls(cfg)
    workspace: BaseWorkspace
    workspace.load_payload_for_controlnet(payload)
    workspace.copy_to_controlnet()
    
    # get policy from workspace
    policy = workspace.model
    if cfg.training.use_ema:
        policy = workspace.ema_model

    workspace.run()

if __name__ == "__main__":
    main()
